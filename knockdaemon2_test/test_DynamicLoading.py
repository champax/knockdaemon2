"""
# -*- coding: utf-8 -*-
# ===============================================================================
#
# Copyright (C) 2013/2017 Laurent Labatut / Laurent Champagnac
#
#
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
# ===============================================================================
"""
import importlib
import inspect
import logging
import unittest
from glob import glob
from sys import path

import os
from os.path import dirname, abspath
from pythonsol.FileUtility import FileUtility
from pythonsol.SolBase import SolBase

SolBase.voodoo_init()
logger = logging.getLogger(__name__)


class TestDynamicLoading(unittest.TestCase):
    """
    Test description
    """

    def setUp(self):
        """
        Setup (called before each test)
        """

        os.environ.setdefault("KNOCK_UNITTEST", "yes")
        self.current_dir = dirname(abspath(__file__)) + SolBase.get_pathseparator()
        self.ar_file_to_delete = list()

    def tearDown(self):
        """
        Setup (called after each test)
        """

        for s in self.ar_file_to_delete:
            os.remove(s)
            pass

    @unittest.skipIf(SolBase.get_machine_name().find("lchgui") < 0, "lchgui pc")
    def test_base(self):
        """
        Test
        """

        # https://stackoverflow.com/questions/301134/dynamic-module-import-in-python
        # https://stackoverflow.com/questions/2259427/load-python-code-at-runtime
        # https://stackoverflow.com/questions/3178285/list-classes-in-directory-python

        ps = SolBase.get_pathseparator()

        ar_dir = list()
        ar_dir.append(self.current_dir + "conf" + ps + "dynamicload" + ps + "probed" + ps)
        probe_dir = ar_dir[-1]

        for s in ar_dir:
            # Locate __init__py., if not found, add it toward all dir if required
            if not FileUtility.is_file_exist(s + "__init__.py"):
                FileUtility.append_text_tofile(s + "__init__.py", "# auto-generated by knockdaemon2", encoding="utf-8")
                logger.info("Added %s", s + "__init__.py")
            self.ar_file_to_delete.append(s + "__init__.py")

        # Browse
        for filename in glob(probe_dir + "*.py"):
            dn = os.path.dirname(filename)
            bn = os.path.basename(filename)
            module_name = os.path.splitext(bn)[0]
            # Path
            logger.info("Adding to path, dn=%s", dn)
            path.append(dn)
            # Load
            logger.info("Loading module_name=%s, from filename=%s", module_name, filename)
            cur_module = importlib.import_module(module_name)
            # Browse
            for name, obj in inspect.getmembers(cur_module):
                if inspect.isclass(obj):
                    logger.info("class_name=%s, name=%s, obj=%s, type=%s", module_name, name, obj, SolBase.get_classname(obj))
